<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */

use Limbas\extra\template\report\ReportTemplateRender;
use Limbas\extra\template\report\ReportTemplateResolver;

global $LINK;
global $gprinter;
global $greportlist;
global $gtabid;
global $report_id;
global $ID;
global $use_record;
require_once(COREPATH . 'extra/report/report.dao');
require_once(COREPATH . 'extra/report/report_dyns.php');

// get params
$gtabid = $_REQUEST['gtabid'];
$report_id = $_REQUEST['report_id'];
$ID = $_REQUEST['ID'];
$use_record = urldecode($_REQUEST['use_record']);
$resolvedTemplateGroups = json_decode(urldecode($_REQUEST['resolvedTemplateGroups']), true);
$resolvedDynamicData = json_decode(urldecode($_REQUEST['resolvedDynamicData']), true);

if (empty($resolvedTemplateGroups)) {
    $resolvedTemplateGroups = [];
}
if (empty($resolvedDynamicData)) {
    $resolvedDynamicData = [];
}

// report medium
$report_defformat = $greportlist[$gtabid]['defformat'][$report_id];
$report_medium = $_REQUEST['report_medium'];
if (!$report_medium) {
    $report_medium = $report_defformat;
}

// get archive name
$report_name = $greportlist[$gtabid]['name'][$report_id];
$report_savename = $greportlist[$gtabid]['savename'][$report_id];
$report_name = reportSavename($report_name,$report_savename,$ID,$report_medium,$report_rename, false);

// get dynamic data placeholders
$reportTemplateRender = new ReportTemplateRender();
$reportTemplateResolver = new ReportTemplateResolver(intval($report_id));
list($reportTemplateElements, $dynamicDataPlaceholdersExist, $unresolvedDynamicDataPlaceholdersExist)
    = $reportTemplateResolver->getDynamicDataPlaceholders($gtabid, $report_id, $ID, $use_record, $resolvedTemplateGroups, $resolvedDynamicData);

if (!isset($preview)) {
    $preview = 0;
}

// check where to display preview as iframe
if (!$dynamicDataPlaceholdersExist) {
    $preview=1;
}
if ($preview) {

    $relation = null;
    if ($_REQUEST['verkn_ID']) {
        $relation = [
            'gtabid' => $_REQUEST['verkn_tabid'],
            'fieldid' => $_REQUEST['verkn_fieldid'],
            'ID' => $_REQUEST['verkn_ID'],
            'showonly' => $_REQUEST['verkn_showonly']
        ];
    }

    $path = limbasGenerateReport($report_id, $gtabid, $ID, 5, $report_medium, $report_rename, $use_record, 0, 0, $resolvedTemplateGroups, $resolvedDynamicData, $relation, true);
}

// define empty dynamic data placeholders for preview during editing
if ($unresolvedDynamicDataPlaceholdersExist) {
    foreach ($reportTemplateElements as &$reportTemplateElement) {
        foreach ($reportTemplateElement['unresolvedDynamicDataPlaceholders'] as $placeholder) {
            $resolvedDynamicData[$placeholder->getIdentifier()] = '';
        }
    }
}


//output custom css in editor
$extcss = $umgvar['path'] . $greportlist[$gtabid]['css'][$report_id];
if (file_exists($extcss)) {
    $reportCss = file_get_contents($extcss);

    $scss = new ScssPhp\ScssPhp\Compiler();

    $reportCss = $scss->compileString(
        '#report_preview {' . $reportCss . '}'
    )->getCss();

    echo '<style>' . $reportCss . '</style>';
}


?>
