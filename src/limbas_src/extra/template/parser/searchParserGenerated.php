<?php
use Limbas\extra\template\base\TemplateConfig;
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */


/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode('&#$code;', ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("ord_unicode")) {
    function ord_unicode($character) {
        if (lmb_strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(lmb_substr($json, 3, 4));
        if (lmb_substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(lmb_substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (lmb_substr($pattern, -1) == "i") {
            return mb_eregi(lmb_substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(lmb_substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("SyntaxError", false)) {
    class SyntaxError extends Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class Parser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;

    }

    private function input_lmb_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return lmb_substr(is_array($this->input) ? implode('', $this->input) : $this->input, $this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_lmb_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;
    private $peg_c67;
    private $peg_c68;
    private $peg_c69;
    private $peg_c70;
    private $peg_c71;
    private $peg_c72;
    private $peg_c73;
    private $peg_c74;
    private $peg_c75;
    private $peg_c76;
    private $peg_c77;
    private $peg_c78;
    private $peg_c79;
    private $peg_c80;
    private $peg_c81;
    private $peg_c82;
    private $peg_c83;
    private $peg_c84;
    private $peg_c85;
    private $peg_c86;
    private $peg_c87;
    private $peg_c88;
    private $peg_c89;
    private $peg_c90;
    private $peg_c91;
    private $peg_c92;
    private $peg_c93;
    private $peg_c94;
    private $peg_c95;
    private $peg_c96;
    private $peg_c97;
    private $peg_c98;
    private $peg_c99;
    private $peg_c100;
    private $peg_c101;
    private $peg_c102;
    private $peg_c103;
    private $peg_c104;
    private $peg_c105;

    private function peg_f0($ifTag, $consequent, $elseifs, $alternative) {
          // check medium
          if ($target = $ifTag['attributes']['target']) {
              if (TemplateConfig::$instance->getMedium() !== $target) {
                  return TemplateConfig::$instance->getHtmlInstance("");
              }
          }

          // get alternative (else)
          if ($alternative) {
              $alternative = $alternative[1]; // Part*
          }

          // transform elseifs (elseif (k + 1) will be alternative of elseif k)
          if ($elseifs) {
              $alternative = array_reduce(array_reverse($elseifs), function($carry, $item) {
                  return TemplateConfig::$instance->getIfPlaceholderInstance($item[0], $item[1], $carry);
              }, $alternative);
          }
          return TemplateConfig::$instance->getIfPlaceholderInstance($ifTag['condition'], $consequent, $alternative);
      }
    private function peg_f1($attrBefore, $attrAfter, $condition) { return array('attributes' => array_merge($attrBefore, $attrAfter), 'condition' => $condition); }
    private function peg_f2($condition) { return $condition; }
    private function peg_f3() { return array('type' => 'else'); }
    private function peg_f4($attrBefore, $attrAfter) { return array('type' => 'endif', 'attributes' => array_merge($attrBefore, $attrAfter)); }
    private function peg_f5($tag) { return array_key_exists('type', $tag['attributes'] ?? []) || array_key_exists('param', $tag['attributes'] ?? []) || array_key_exists('condition', $tag['attributes'] ?? []); }
    private function peg_f6($tag) {
            // check medium
            if ($target = $tag['attributes']['target']) {
                if (TemplateConfig::$instance->getMedium() !== $target) {
                    return TemplateConfig::$instance->getHtmlInstance("");
                }
            }

            // get data-... options
            $options = array();
            foreach ($tag['attributes'] as $key => $value) {
                if (lmb_substr($key, 0, 5) == 'data-') {
                    $options[lmb_substr($key, 5)] = $value;
                }
            }

            $type = $tag['attributes']['type'];
            switch($type) {
                case 'data':
                    return TemplateConfig::$instance->getDataPlaceholderInstance($tag['attributes']['src'], $options, $tag['attributes']['alt']);

                case 'template':
                    return TemplateConfig::$instance->getSubTemplateElementPlaceholderInstance($tag['attributes']['name'], $options);

                case 'dynamicData':
                    return TemplateConfig::$instance->getDynamicDataPlaceholderInstance($tag['attributes']['title'], $options);

                case 'group':
                    return TemplateConfig::$instance->getTemplateGroupPlaceholderInstance($tag['attributes']['name'], array('desc' => $tag['attributes']['title'], 'id' => $tag['attributes']['id'], 'data' => $options));

                case 'func':
                    return TemplateConfig::$instance->getFunctionPlaceholderInstance($tag['attributes']['name'], $tag['children']);
                    
                case 'header':
                case 'footer':
                    return TemplateConfig::$instance->getHeaderFooterInstance($type, $tag['attributes'], $options);
                case 'background':
                    return TemplateConfig::$instance->getBackgroundInstance($tag['attributes'], $options);
            }

            // function params
            $param = $tag['attributes']['param'];
            switch($param) {
                case 'data':
                    return TemplateConfig::$instance->getDataPlaceholderInstance($tag['attributes']['src'], $options, null);

                case 'func':
                    return TemplateConfig::$instance->getFunctionPlaceholderInstance($tag['attributes']['name'], $tag['children']);

                case 'value':
                    return $tag['attributes']['value'];
            }

            // if condition
            $condition = $tag['attributes']['condition'];
            switch($condition) {
                case 'data':
                    return TemplateConfig::$instance->getDataPlaceholderInstance($tag['attributes']['src'], $options, null);

                case 'func':
                    return TemplateConfig::$instance->getFunctionPlaceholderInstance($tag['attributes']['name'], $tag['children']);
            }

            throw new Exception("Unknown type {$type}, param {$param} or condition {$condition}!");
        }
    private function peg_f7($attributes) { return array('attributes' => $attributes); }
    private function peg_f8($attributes, $children) { return array('attributes' => $attributes, 'children' => array_map(function($c) { return $c[0]; }, $children)); }
    private function peg_f9($attributes) { return array_merge(...$attributes); }
    private function peg_f10($head, $tail) { array_unshift($tail, $head); return array('src' => $tail); }
    private function peg_f11($tableIdentifier) { return array('data-lmb-data-row' => array(array('table' => $tableIdentifier))); }
    private function peg_f12($head, $tail) { array_unshift($tail, $head); return array('data-lmb-data-row' => $tail); }
    private function peg_f13($call) { return array('data-lmb-data-row-filter' => $call); }
    private function peg_f14($key, $val) { return $key == 'type' && ($val == 'if' || $val == 'elseif' || $val == 'else' || $val == 'endif') || $key == 'src'; }
    private function peg_f15($key, $val) { return array($key => $val); }
    private function peg_f16($key) { return $key == 'type' || $key == 'src'; }
    private function peg_f17($key) { return array($key => true); }
    private function peg_f18() { return $this->text(); }
    private function peg_f19() { return html_entity_decode($this->text()); }
    private function peg_f20($attributes) { return TemplateConfig::$instance->getImageInstance($attributes); }
    private function peg_f21($cells) { return TemplateConfig::$instance->getTableRowInstance($cells, array()); }
    private function peg_f22($attributes, $cells) { return TemplateConfig::$instance->getTableRowInstance($cells, $attributes); }
    private function peg_f23($parts) { return TemplateConfig::$instance->getTableCellInstance(array_map(function($p) { return $p[1]; }, $parts), array()); }
    private function peg_f24($attributes, $parts) { return TemplateConfig::$instance->getTableCellInstance(array_map(function($p) { return $p[1]; }, $parts), $attributes); }
    private function peg_f25() { return TemplateConfig::$instance->getHtmlInstance($this->text()); }
    private function peg_f26($condition, $consequent, $elseifs, $alternative) {
          // check medium
          if (!$condition) {
              return TemplateConfig::$instance->getHtmlInstance(""); // if has form: or report: and doesnt match
          }

          // get alternative (else)
          if ($alternative) {
              $alternative = $alternative[1]; // Part*
          }

          // transform elseifs (elseif (k + 1) will be alternative of elseif k)
          if ($elseifs) {
              $alternative = array_reduce(array_reverse($elseifs), function($carry, $item) {
                  return TemplateConfig::$instance->getIfPlaceholderInstance($item[0], $item[1], $carry);
              }, $alternative);
          }
          return TemplateConfig::$instance->getIfPlaceholderInstance($condition, $consequent, $alternative);
      }
    private function peg_f27($medium, $condition) { return (!$medium || TemplateConfig::$instance->getMedium() === $medium) ? $condition : null; }
    private function peg_f28($medium, $tpl) { return (!$medium || TemplateConfig::$instance->getMedium() === $medium) ? $tpl : TemplateConfig::$instance->getHtmlInstance(""); }
    private function peg_f29($head, $tail, $options, $altvalue) { array_unshift($tail, $head); return TemplateConfig::$instance->getDataPlaceholderInstance($tail, array_merge(...$options), $altvalue); }
    private function peg_f30($tableIdentifier, $fieldIdentifier) { $ret = array('name' => $fieldIdentifier); if ($tableIdentifier) { $ret['table'] = $tableIdentifier[1]; } return $ret; }
    private function peg_f31($param) { return $param; }
    private function peg_f32($call) { return $call; }
    private function peg_f33($name, $paramHead, $paramTail) { $paramTail = array_map(function($p) { return $p[3]; }, $paramTail); array_unshift($paramTail, $paramHead); return TemplateConfig::$instance->getFunctionPlaceholderInstance($name, $paramTail); }
    private function peg_f34($name) { return TemplateConfig::$instance->getFunctionPlaceholderInstance($name, array()); }
    private function peg_f35($parts) { return join('', $parts); }
    private function peg_f36($decimal) { return $decimal ? floatval($this->text()) : intval($this->text()); }
    private function peg_f37($options) { return TemplateConfig::$instance->getSubTemplateElementPlaceholderInstance(html_entity_decode($this->text()), array_merge(...$options)); }
    private function peg_f38($groupName, $options) { return TemplateConfig::$instance->getTemplateGroupPlaceholderInstance($groupName, array_merge(...$options)); }
    private function peg_f39($desc, $options) { return TemplateConfig::$instance->getDynamicDataPlaceholderInstance($desc, array_merge(...$options)); }
    private function peg_f40($medium) { return $medium; }

    private function peg_parseStart() {

      $s0 = array();
      $s1 = $this->peg_parsePart();
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        $s1 = $this->peg_parsePart();
      }

      return $s0;
    }

    private function peg_parsePart() {

      $s0 = $this->peg_parseIfConstruct();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseTemplateTag();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseIfConstructHtml();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseTemplateTagHtml();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseImageTag();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseRepeatedDataRow();
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseHtml();
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseIfConstructHtml() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIfTagHtml();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsePart();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsePart();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parseElseIfTagHtml();
          if ($s5 !== $this->peg_FAILED) {
            $s6 = array();
            $s7 = $this->peg_parsePart();
            while ($s7 !== $this->peg_FAILED) {
              $s6[] = $s7;
              $s7 = $this->peg_parsePart();
            }
            if ($s6 !== $this->peg_FAILED) {
              $s5 = array($s5, $s6);
              $s4 = $s5;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_FAILED;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parseElseIfTagHtml();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = array();
              $s7 = $this->peg_parsePart();
              while ($s7 !== $this->peg_FAILED) {
                $s6[] = $s7;
                $s7 = $this->peg_parsePart();
              }
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parseElseTagHtml();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = array();
              $s7 = $this->peg_parsePart();
              while ($s7 !== $this->peg_FAILED) {
                $s6[] = $s7;
                $s7 = $this->peg_parsePart();
              }
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseEndIfTagHtml();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f0($s1, $s2, $s3, $s4);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIfTagHtml() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c0) {
        $s1 = $this->peg_c0;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseAttributesHtml();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_lmb_substr($this->peg_currPos, 9) === $this->peg_c2) {
                $s5 = $this->peg_c2;
                $this->peg_currPos += 9;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c3);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseAttributesHtml();
                  if ($s7 === $this->peg_FAILED) {
                    $s7 = null;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
                      $s8 = $this->peg_c4;
                      $this->peg_currPos++;
                    } else {
                      $s8 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c5);
                      }
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parse_();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parseTemplateTagHtml();
                        if ($s10 !== $this->peg_FAILED) {
                          $s11 = $this->peg_parse_();
                          if ($s11 !== $this->peg_FAILED) {
                            if ($this->input_lmb_substr($this->peg_currPos, 6) === $this->peg_c6) {
                              $s12 = $this->peg_c6;
                              $this->peg_currPos += 6;
                            } else {
                              $s12 = $this->peg_FAILED;
                              if ($this->peg_silentFails === 0) {
                                  $this->peg_fail($this->peg_c7);
                              }
                            }
                            if ($s12 !== $this->peg_FAILED) {
                              $this->peg_reportedPos = $s0;
                              $s1 = $this->peg_f1($s3, $s7, $s10);
                              $s0 = $s1;
                            } else {
                              $this->peg_currPos = $s0;
                              $s0 = $this->peg_FAILED;
                            }
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseElseIfTagHtml() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c0) {
        $s1 = $this->peg_c0;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseAttributesHtml();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_lmb_substr($this->peg_currPos, 13) === $this->peg_c8) {
                $s5 = $this->peg_c8;
                $this->peg_currPos += 13;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c9);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseAttributesHtml();
                  if ($s7 === $this->peg_FAILED) {
                    $s7 = null;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
                      $s8 = $this->peg_c4;
                      $this->peg_currPos++;
                    } else {
                      $s8 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c5);
                      }
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parse_();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parseTemplateTagHtml();
                        if ($s10 !== $this->peg_FAILED) {
                          $s11 = $this->peg_parse_();
                          if ($s11 !== $this->peg_FAILED) {
                            if ($this->input_lmb_substr($this->peg_currPos, 6) === $this->peg_c6) {
                              $s12 = $this->peg_c6;
                              $this->peg_currPos += 6;
                            } else {
                              $s12 = $this->peg_FAILED;
                              if ($this->peg_silentFails === 0) {
                                  $this->peg_fail($this->peg_c7);
                              }
                            }
                            if ($s12 !== $this->peg_FAILED) {
                              $this->peg_reportedPos = $s0;
                              $s1 = $this->peg_f2($s10);
                              $s0 = $s1;
                            } else {
                              $this->peg_currPos = $s0;
                              $s0 = $this->peg_FAILED;
                            }
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseElseTagHtml() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c0) {
        $s1 = $this->peg_c0;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseAttributesHtml();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_lmb_substr($this->peg_currPos, 11) === $this->peg_c10) {
                $s5 = $this->peg_c10;
                $this->peg_currPos += 11;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c11);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseAttributesHtml();
                  if ($s7 === $this->peg_FAILED) {
                    $s7 = null;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c12) {
                      $s8 = $this->peg_c12;
                      $this->peg_currPos += 2;
                    } else {
                      $s8 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c13);
                      }
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f3();
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c0) {
          $s1 = $this->peg_c0;
          $this->peg_currPos += 4;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseAttributesHtml();
            if ($s3 === $this->peg_FAILED) {
              $s3 = null;
            }
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parse_();
              if ($s4 !== $this->peg_FAILED) {
                if ($this->input_lmb_substr($this->peg_currPos, 11) === $this->peg_c10) {
                  $s5 = $this->peg_c10;
                  $this->peg_currPos += 11;
                } else {
                  $s5 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c11);
                  }
                }
                if ($s5 !== $this->peg_FAILED) {
                  $s6 = $this->peg_parse_();
                  if ($s6 !== $this->peg_FAILED) {
                    $s7 = $this->peg_parseAttributesHtml();
                    if ($s7 === $this->peg_FAILED) {
                      $s7 = null;
                    }
                    if ($s7 !== $this->peg_FAILED) {
                      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
                        $s8 = $this->peg_c4;
                        $this->peg_currPos++;
                      } else {
                        $s8 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c5);
                        }
                      }
                      if ($s8 !== $this->peg_FAILED) {
                        $s9 = $this->peg_parse_();
                        if ($s9 !== $this->peg_FAILED) {
                          if ($this->input_lmb_substr($this->peg_currPos, 6) === $this->peg_c6) {
                            $s10 = $this->peg_c6;
                            $this->peg_currPos += 6;
                          } else {
                            $s10 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c7);
                            }
                          }
                          if ($s10 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $s0;
                            $s1 = $this->peg_f3();
                            $s0 = $s1;
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseEndIfTagHtml() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c0) {
        $s1 = $this->peg_c0;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseAttributesHtml();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_lmb_substr($this->peg_currPos, 12) === $this->peg_c14) {
                $s5 = $this->peg_c14;
                $this->peg_currPos += 12;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c15);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseAttributesHtml();
                  if ($s7 === $this->peg_FAILED) {
                    $s7 = null;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c12) {
                      $s8 = $this->peg_c12;
                      $this->peg_currPos += 2;
                    } else {
                      $s8 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c13);
                      }
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f4($s3, $s7);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c0) {
          $s1 = $this->peg_c0;
          $this->peg_currPos += 4;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseAttributesHtml();
            if ($s3 === $this->peg_FAILED) {
              $s3 = null;
            }
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parse_();
              if ($s4 !== $this->peg_FAILED) {
                if ($this->input_lmb_substr($this->peg_currPos, 12) === $this->peg_c14) {
                  $s5 = $this->peg_c14;
                  $this->peg_currPos += 12;
                } else {
                  $s5 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c15);
                  }
                }
                if ($s5 !== $this->peg_FAILED) {
                  $s6 = $this->peg_parse_();
                  if ($s6 !== $this->peg_FAILED) {
                    $s7 = $this->peg_parseAttributesHtml();
                    if ($s7 === $this->peg_FAILED) {
                      $s7 = null;
                    }
                    if ($s7 !== $this->peg_FAILED) {
                      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
                        $s8 = $this->peg_c4;
                        $this->peg_currPos++;
                      } else {
                        $s8 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c5);
                        }
                      }
                      if ($s8 !== $this->peg_FAILED) {
                        $s9 = $this->peg_parse_();
                        if ($s9 !== $this->peg_FAILED) {
                          if ($this->input_lmb_substr($this->peg_currPos, 6) === $this->peg_c6) {
                            $s10 = $this->peg_c6;
                            $this->peg_currPos += 6;
                          } else {
                            $s10 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c7);
                            }
                          }
                          if ($s10 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $s0;
                            $s1 = $this->peg_f4($s3, $s7);
                            $s0 = $s1;
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseTemplateTagHtml() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTemplateTagHtmlInner();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $this->peg_currPos;
        $s2 = $this->peg_f5($s1);
        if ($s2) {
          $s2 = null;
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f6($s1);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseTemplateTagHtmlInner() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c0) {
        $s1 = $this->peg_c0;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseAttributesHtml();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c12) {
              $s4 = $this->peg_c12;
              $this->peg_currPos += 2;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c13);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f7($s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c0) {
          $s1 = $this->peg_c0;
          $this->peg_currPos += 4;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseAttributesHtml();
            if ($s3 === $this->peg_FAILED) {
              $s3 = null;
            }
            if ($s3 !== $this->peg_FAILED) {
              if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
                $s4 = $this->peg_c4;
                $this->peg_currPos++;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c5);
                }
              }
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parse_();
                if ($s5 !== $this->peg_FAILED) {
                  $s6 = array();
                  $s7 = $this->peg_currPos;
                  $s8 = $this->peg_parseTemplateTagHtml();
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parse_();
                    if ($s9 !== $this->peg_FAILED) {
                      $s8 = array($s8, $s9);
                      $s7 = $s8;
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                  while ($s7 !== $this->peg_FAILED) {
                    $s6[] = $s7;
                    $s7 = $this->peg_currPos;
                    $s8 = $this->peg_parseTemplateTagHtml();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parse_();
                      if ($s9 !== $this->peg_FAILED) {
                        $s8 = array($s8, $s9);
                        $s7 = $s8;
                      } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_FAILED;
                    }
                  }
                  if ($s6 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 6) === $this->peg_c6) {
                      $s7 = $this->peg_c6;
                      $this->peg_currPos += 6;
                    } else {
                      $s7 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c7);
                      }
                    }
                    if ($s7 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f8($s3, $s6);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseAttributesHtml() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseAttributeHtml();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseAttributeHtml();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f9($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseAttributeHtml() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c16) {
          $s2 = $this->peg_c16;
          $this->peg_currPos += 4;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c17);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSTRDELIMITER();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseFieldIdentifier();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = array();
              $s6 = $this->peg_parseFieldIdentifier();
              while ($s6 !== $this->peg_FAILED) {
                $s5[] = $s6;
                $s6 = $this->peg_parseFieldIdentifier();
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseSTRDELIMITER();
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f10($s4, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_();
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_lmb_substr($this->peg_currPos, 18) === $this->peg_c18) {
            $s2 = $this->peg_c18;
            $this->peg_currPos += 18;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c19);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseSTRDELIMITER();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseTABLEDATASTART();
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parseIdentifier();
                if ($s5 !== $this->peg_FAILED) {
                  $s6 = $this->peg_parseSTRDELIMITER();
                  if ($s6 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f11($s5);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_parse_();
          if ($s1 !== $this->peg_FAILED) {
            if ($this->input_lmb_substr($this->peg_currPos, 18) === $this->peg_c18) {
              $s2 = $this->peg_c18;
              $this->peg_currPos += 18;
            } else {
              $s2 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c19);
              }
            }
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_parseSTRDELIMITER();
              if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parseFieldIdentifier();
                if ($s4 !== $this->peg_FAILED) {
                  $s5 = array();
                  $s6 = $this->peg_parseFieldIdentifier();
                  while ($s6 !== $this->peg_FAILED) {
                    $s5[] = $s6;
                    $s6 = $this->peg_parseFieldIdentifier();
                  }
                  if ($s5 !== $this->peg_FAILED) {
                    $s6 = $this->peg_parseSTRDELIMITER();
                    if ($s6 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f12($s4, $s5);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parse_();
            if ($s1 !== $this->peg_FAILED) {
              if ($this->input_lmb_substr($this->peg_currPos, 25) === $this->peg_c20) {
                $s2 = $this->peg_c20;
                $this->peg_currPos += 25;
              } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c21);
                }
              }
              if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parseSTRDELIMITER();
                if ($s3 !== $this->peg_FAILED) {
                  $s4 = $this->peg_parseFUNCTIONSTART();
                  if ($s4 !== $this->peg_FAILED) {
                    $s5 = $this->peg_parseFunctionCall();
                    if ($s5 !== $this->peg_FAILED) {
                      $s6 = $this->peg_parseSTRDELIMITER();
                      if ($s6 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f13($s5);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              $s1 = $this->peg_parse_();
              if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parseAttributeHtmlKey();
                if ($s2 !== $this->peg_FAILED) {
                  if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c22) {
                    $s3 = $this->peg_c22;
                    $this->peg_currPos++;
                  } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c23);
                    }
                  }
                  if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parseSTRDELIMITER();
                    if ($s4 !== $this->peg_FAILED) {
                      $s5 = $this->peg_parseAttributeHtmlVal();
                      if ($s5 !== $this->peg_FAILED) {
                        $s6 = $this->peg_parseSTRDELIMITER();
                        if ($s6 !== $this->peg_FAILED) {
                          $s7 = $this->peg_parse_();
                          if ($s7 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $this->peg_currPos;
                            $s8 = $this->peg_f14($s2, $s5);
                            if ($s8) {
                              $s8 = $this->peg_FAILED;
                            } else {
                              $s8 = null;
                            }
                            if ($s8 !== $this->peg_FAILED) {
                              $this->peg_reportedPos = $s0;
                              $s1 = $this->peg_f15($s2, $s5);
                              $s0 = $s1;
                            } else {
                              $this->peg_currPos = $s0;
                              $s0 = $this->peg_FAILED;
                            }
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parse_();
                if ($s1 !== $this->peg_FAILED) {
                  $s2 = $this->peg_parseAttributeHtmlKey();
                  if ($s2 !== $this->peg_FAILED) {
                    $s3 = $this->peg_parse_();
                    if ($s3 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $this->peg_currPos;
                      $s4 = $this->peg_f16($s2);
                      if ($s4) {
                        $s4 = $this->peg_FAILED;
                      } else {
                        $s4 = null;
                      }
                      if ($s4 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f17($s2);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseAttributeHtmlKey() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_currPos;
      $this->peg_silentFails++;
      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
        $s4 = $this->peg_c4;
        $this->peg_currPos++;
      } else {
        $s4 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c5);
        }
      }
      $this->peg_silentFails--;
      if ($s4 === $this->peg_FAILED) {
        $s3 = null;
      } else {
        $this->peg_currPos = $s3;
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c24) {
          $s5 = $this->peg_c24;
          $this->peg_currPos++;
        } else {
          $s5 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c25);
          }
        }
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = null;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c22) {
            $s6 = $this->peg_c22;
            $this->peg_currPos++;
          } else {
            $s6 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c23);
            }
          }
          $this->peg_silentFails--;
          if ($s6 === $this->peg_FAILED) {
            $s5 = null;
          } else {
            $this->peg_currPos = $s5;
            $s5 = $this->peg_FAILED;
          }
          if ($s5 !== $this->peg_FAILED) {
            if ($this->input_length > $this->peg_currPos) {
              $s6 = $this->input_lmb_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c26);
              }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s3 = array($s3, $s4, $s5, $s6);
              $s2 = $s3;
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
            $s4 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c5);
            }
          }
          $this->peg_silentFails--;
          if ($s4 === $this->peg_FAILED) {
            $s3 = null;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c24) {
              $s5 = $this->peg_c24;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c25);
              }
            }
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
              $s4 = null;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $this->peg_silentFails++;
              if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c22) {
                $s6 = $this->peg_c22;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c23);
                }
              }
              $this->peg_silentFails--;
              if ($s6 === $this->peg_FAILED) {
                $s5 = null;
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              if ($s5 !== $this->peg_FAILED) {
                if ($this->input_length > $this->peg_currPos) {
                  $s6 = $this->input_lmb_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c26);
                  }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s3 = array($s3, $s4, $s5, $s6);
                  $s2 = $s3;
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f18();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseAttributeHtmlVal() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s4 = $this->peg_parseSTRDELIMITER();
      $this->peg_silentFails--;
      if ($s4 === $this->peg_FAILED) {
        $s3 = null;
      } else {
        $this->peg_currPos = $s3;
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        if ($this->input_length > $this->peg_currPos) {
          $s4 = $this->input_lmb_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c26);
          }
        }
        if ($s4 !== $this->peg_FAILED) {
          $s3 = array($s3, $s4);
          $s2 = $s3;
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s4 = $this->peg_parseSTRDELIMITER();
        $this->peg_silentFails--;
        if ($s4 === $this->peg_FAILED) {
          $s3 = null;
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        if ($s3 !== $this->peg_FAILED) {
          if ($this->input_length > $this->peg_currPos) {
            $s4 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c26);
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f19();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseImageTag() {

      $s0 = $this->peg_parseImageTagInner();

      return $s0;
    }

    private function peg_parseImageTagInner() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c27) {
        $s1 = $this->peg_c27;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c28);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseAttributesImg();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              if (peg_regex_test($this->peg_c29, $this->input_lmb_substr($this->peg_currPos, 1))) {
                $s5 = $this->input_lmb_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c30);
                }
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = null;
              }
              if ($s5 !== $this->peg_FAILED) {
                if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
                  $s6 = $this->peg_c4;
                  $this->peg_currPos++;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c5);
                  }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f20($s3);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseAttributesImg() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseAttributeImg();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseAttributeImg();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f9($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseAttributeImg() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseAttributeHtmlKey();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c22) {
            $s3 = $this->peg_c22;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c23);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseSTRDELIMITER();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseAttributeHtmlVal();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseSTRDELIMITER();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parse_();
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f15($s2, $s5);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseRepeatedDataRow() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c31) {
          $s2 = $this->peg_c31;
          $this->peg_currPos += 4;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c32);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_parseRepeatedDataCell();
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_parseRepeatedDataCell();
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 !== $this->peg_FAILED) {
                if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c33) {
                  $s6 = $this->peg_c33;
                  $this->peg_currPos += 5;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c34);
                  }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parse_();
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f21($s4);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_();
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c35) {
            $s2 = $this->peg_c35;
            $this->peg_currPos += 4;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c36);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parse_();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseAttributesHtml();
              if ($s4 === $this->peg_FAILED) {
                $s4 = null;
              }
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parse_();
                if ($s5 !== $this->peg_FAILED) {
                  if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
                    $s6 = $this->peg_c4;
                    $this->peg_currPos++;
                  } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c5);
                    }
                  }
                  if ($s6 !== $this->peg_FAILED) {
                    $s7 = $this->peg_parse_();
                    if ($s7 !== $this->peg_FAILED) {
                      $s8 = array();
                      $s9 = $this->peg_parseRepeatedDataCell();
                      while ($s9 !== $this->peg_FAILED) {
                        $s8[] = $s9;
                        $s9 = $this->peg_parseRepeatedDataCell();
                      }
                      if ($s8 !== $this->peg_FAILED) {
                        $s9 = $this->peg_parse_();
                        if ($s9 !== $this->peg_FAILED) {
                          if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c33) {
                            $s10 = $this->peg_c33;
                            $this->peg_currPos += 5;
                          } else {
                            $s10 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c34);
                            }
                          }
                          if ($s10 !== $this->peg_FAILED) {
                            $s11 = $this->peg_parse_();
                            if ($s11 !== $this->peg_FAILED) {
                              $this->peg_reportedPos = $s0;
                              $s1 = $this->peg_f22($s4, $s8);
                              $s0 = $s1;
                            } else {
                              $this->peg_currPos = $s0;
                              $s0 = $this->peg_FAILED;
                            }
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseRepeatedDataCell() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c37) {
          $s2 = $this->peg_c37;
          $this->peg_currPos += 4;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c38);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c39) {
            $s6 = $this->peg_c39;
            $this->peg_currPos += 5;
          } else {
            $s6 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c40);
            }
          }
          $this->peg_silentFails--;
          if ($s6 === $this->peg_FAILED) {
            $s5 = null;
          } else {
            $this->peg_currPos = $s5;
            $s5 = $this->peg_FAILED;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parseTdPart();
            if ($s6 !== $this->peg_FAILED) {
              $s5 = array($s5, $s6);
              $s4 = $s5;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_FAILED;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_currPos;
            $this->peg_silentFails++;
            if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c39) {
              $s6 = $this->peg_c39;
              $this->peg_currPos += 5;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c40);
              }
            }
            $this->peg_silentFails--;
            if ($s6 === $this->peg_FAILED) {
              $s5 = null;
            } else {
              $this->peg_currPos = $s5;
              $s5 = $this->peg_FAILED;
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseTdPart();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c39) {
              $s4 = $this->peg_c39;
              $this->peg_currPos += 5;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c40);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f23($s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_();
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c41) {
            $s2 = $this->peg_c41;
            $this->peg_currPos += 4;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c42);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parse_();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseAttributesHtml();
              if ($s4 === $this->peg_FAILED) {
                $s4 = null;
              }
              if ($s4 !== $this->peg_FAILED) {
                if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c4) {
                  $s5 = $this->peg_c4;
                  $this->peg_currPos++;
                } else {
                  $s5 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c5);
                  }
                }
                if ($s5 !== $this->peg_FAILED) {
                  $s6 = array();
                  $s7 = $this->peg_currPos;
                  $s8 = $this->peg_currPos;
                  $this->peg_silentFails++;
                  if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c39) {
                    $s9 = $this->peg_c39;
                    $this->peg_currPos += 5;
                  } else {
                    $s9 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c40);
                    }
                  }
                  $this->peg_silentFails--;
                  if ($s9 === $this->peg_FAILED) {
                    $s8 = null;
                  } else {
                    $this->peg_currPos = $s8;
                    $s8 = $this->peg_FAILED;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseTdPart();
                    if ($s9 !== $this->peg_FAILED) {
                      $s8 = array($s8, $s9);
                      $s7 = $s8;
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                  while ($s7 !== $this->peg_FAILED) {
                    $s6[] = $s7;
                    $s7 = $this->peg_currPos;
                    $s8 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c39) {
                      $s9 = $this->peg_c39;
                      $this->peg_currPos += 5;
                    } else {
                      $s9 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c40);
                      }
                    }
                    $this->peg_silentFails--;
                    if ($s9 === $this->peg_FAILED) {
                      $s8 = null;
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseTdPart();
                      if ($s9 !== $this->peg_FAILED) {
                        $s8 = array($s8, $s9);
                        $s7 = $s8;
                      } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_FAILED;
                    }
                  }
                  if ($s6 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c39) {
                      $s7 = $this->peg_c39;
                      $this->peg_currPos += 5;
                    } else {
                      $s7 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c40);
                      }
                    }
                    if ($s7 !== $this->peg_FAILED) {
                      $s8 = $this->peg_parse_();
                      if ($s8 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f24($s4, $s6);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseTdPart() {

      $s0 = $this->peg_parseIfConstruct();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseTemplateTag();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseIfConstructHtml();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseTemplateTagHtml();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseImageTag();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseRepeatedDataRow();
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseTdHtml();
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseTdHtml() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s4 = $this->peg_parseTAGSTART();
      $this->peg_silentFails--;
      if ($s4 === $this->peg_FAILED) {
        $s3 = null;
      } else {
        $this->peg_currPos = $s3;
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parseESCAPEDTAGSTART();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = null;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c43) {
            $s6 = $this->peg_c43;
            $this->peg_currPos += 5;
          } else {
            $s6 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c44);
            }
          }
          $this->peg_silentFails--;
          if ($s6 === $this->peg_FAILED) {
            $s5 = null;
          } else {
            $this->peg_currPos = $s5;
            $s5 = $this->peg_FAILED;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_currPos;
            $this->peg_silentFails++;
            if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c45) {
              $s7 = $this->peg_c45;
              $this->peg_currPos += 5;
            } else {
              $s7 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c46);
              }
            }
            $this->peg_silentFails--;
            if ($s7 === $this->peg_FAILED) {
              $s6 = null;
            } else {
              $this->peg_currPos = $s6;
              $s6 = $this->peg_FAILED;
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_currPos;
              $this->peg_silentFails++;
              if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c35) {
                $s8 = $this->peg_c35;
                $this->peg_currPos += 4;
              } else {
                $s8 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c36);
                }
              }
              $this->peg_silentFails--;
              if ($s8 === $this->peg_FAILED) {
                $s7 = null;
              } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_FAILED;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_currPos;
                $this->peg_silentFails++;
                if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c31) {
                  $s9 = $this->peg_c31;
                  $this->peg_currPos += 4;
                } else {
                  $s9 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c32);
                  }
                }
                $this->peg_silentFails--;
                if ($s9 === $this->peg_FAILED) {
                  $s8 = null;
                } else {
                  $this->peg_currPos = $s8;
                  $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                  $s9 = $this->peg_currPos;
                  $this->peg_silentFails++;
                  if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c41) {
                    $s10 = $this->peg_c41;
                    $this->peg_currPos += 4;
                  } else {
                    $s10 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c42);
                    }
                  }
                  $this->peg_silentFails--;
                  if ($s10 === $this->peg_FAILED) {
                    $s9 = null;
                  } else {
                    $this->peg_currPos = $s9;
                    $s9 = $this->peg_FAILED;
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    $s10 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c37) {
                      $s11 = $this->peg_c37;
                      $this->peg_currPos += 4;
                    } else {
                      $s11 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c38);
                      }
                    }
                    $this->peg_silentFails--;
                    if ($s11 === $this->peg_FAILED) {
                      $s10 = null;
                    } else {
                      $this->peg_currPos = $s10;
                      $s10 = $this->peg_FAILED;
                    }
                    if ($s10 !== $this->peg_FAILED) {
                      $s11 = $this->peg_currPos;
                      $this->peg_silentFails++;
                      if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c39) {
                        $s12 = $this->peg_c39;
                        $this->peg_currPos += 5;
                      } else {
                        $s12 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c40);
                        }
                      }
                      $this->peg_silentFails--;
                      if ($s12 === $this->peg_FAILED) {
                        $s11 = null;
                      } else {
                        $this->peg_currPos = $s11;
                        $s11 = $this->peg_FAILED;
                      }
                      if ($s11 !== $this->peg_FAILED) {
                        if ($this->input_length > $this->peg_currPos) {
                          $s12 = $this->input_lmb_substr($this->peg_currPos, 1);
                          $this->peg_currPos++;
                        } else {
                          $s12 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) {
                              $this->peg_fail($this->peg_c26);
                          }
                        }
                        if ($s12 !== $this->peg_FAILED) {
                          $s3 = array($s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12);
                          $s2 = $s3;
                        } else {
                          $this->peg_currPos = $s2;
                          $s2 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s4 = $this->peg_parseTAGSTART();
          $this->peg_silentFails--;
          if ($s4 === $this->peg_FAILED) {
            $s3 = null;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s5 = $this->peg_parseESCAPEDTAGSTART();
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
              $s4 = null;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $this->peg_silentFails++;
              if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c43) {
                $s6 = $this->peg_c43;
                $this->peg_currPos += 5;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c44);
                }
              }
              $this->peg_silentFails--;
              if ($s6 === $this->peg_FAILED) {
                $s5 = null;
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_currPos;
                $this->peg_silentFails++;
                if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c45) {
                  $s7 = $this->peg_c45;
                  $this->peg_currPos += 5;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c46);
                  }
                }
                $this->peg_silentFails--;
                if ($s7 === $this->peg_FAILED) {
                  $s6 = null;
                } else {
                  $this->peg_currPos = $s6;
                  $s6 = $this->peg_FAILED;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_currPos;
                  $this->peg_silentFails++;
                  if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c35) {
                    $s8 = $this->peg_c35;
                    $this->peg_currPos += 4;
                  } else {
                    $s8 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c36);
                    }
                  }
                  $this->peg_silentFails--;
                  if ($s8 === $this->peg_FAILED) {
                    $s7 = null;
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c31) {
                      $s9 = $this->peg_c31;
                      $this->peg_currPos += 4;
                    } else {
                      $s9 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c32);
                      }
                    }
                    $this->peg_silentFails--;
                    if ($s9 === $this->peg_FAILED) {
                      $s8 = null;
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_currPos;
                      $this->peg_silentFails++;
                      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c41) {
                        $s10 = $this->peg_c41;
                        $this->peg_currPos += 4;
                      } else {
                        $s10 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c42);
                        }
                      }
                      $this->peg_silentFails--;
                      if ($s10 === $this->peg_FAILED) {
                        $s9 = null;
                      } else {
                        $this->peg_currPos = $s9;
                        $s9 = $this->peg_FAILED;
                      }
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_currPos;
                        $this->peg_silentFails++;
                        if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c37) {
                          $s11 = $this->peg_c37;
                          $this->peg_currPos += 4;
                        } else {
                          $s11 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) {
                              $this->peg_fail($this->peg_c38);
                          }
                        }
                        $this->peg_silentFails--;
                        if ($s11 === $this->peg_FAILED) {
                          $s10 = null;
                        } else {
                          $this->peg_currPos = $s10;
                          $s10 = $this->peg_FAILED;
                        }
                        if ($s10 !== $this->peg_FAILED) {
                          $s11 = $this->peg_currPos;
                          $this->peg_silentFails++;
                          if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c39) {
                            $s12 = $this->peg_c39;
                            $this->peg_currPos += 5;
                          } else {
                            $s12 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_c40);
                            }
                          }
                          $this->peg_silentFails--;
                          if ($s12 === $this->peg_FAILED) {
                            $s11 = null;
                          } else {
                            $this->peg_currPos = $s11;
                            $s11 = $this->peg_FAILED;
                          }
                          if ($s11 !== $this->peg_FAILED) {
                            if ($this->input_length > $this->peg_currPos) {
                              $s12 = $this->input_lmb_substr($this->peg_currPos, 1);
                              $this->peg_currPos++;
                            } else {
                              $s12 = $this->peg_FAILED;
                              if ($this->peg_silentFails === 0) {
                                  $this->peg_fail($this->peg_c26);
                              }
                            }
                            if ($s12 !== $this->peg_FAILED) {
                              $s3 = array($s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12);
                              $s2 = $s3;
                            } else {
                              $this->peg_currPos = $s2;
                              $s2 = $this->peg_FAILED;
                            }
                          } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s2;
                          $s2 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f25();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseIfConstruct() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIfTag();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsePart();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsePart();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parseElseIfTag();
          if ($s5 !== $this->peg_FAILED) {
            $s6 = array();
            $s7 = $this->peg_parsePart();
            while ($s7 !== $this->peg_FAILED) {
              $s6[] = $s7;
              $s7 = $this->peg_parsePart();
            }
            if ($s6 !== $this->peg_FAILED) {
              $s5 = array($s5, $s6);
              $s4 = $s5;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_FAILED;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parseElseIfTag();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = array();
              $s7 = $this->peg_parsePart();
              while ($s7 !== $this->peg_FAILED) {
                $s6[] = $s7;
                $s7 = $this->peg_parsePart();
              }
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parseElseTag();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = array();
              $s7 = $this->peg_parsePart();
              while ($s7 !== $this->peg_FAILED) {
                $s6[] = $s7;
                $s7 = $this->peg_parsePart();
              }
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseEndifTag();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f26($s1, $s2, $s3, $s4);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIfTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseMedium();
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseIF();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseIfCondition();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseTAGEND();
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f27($s2, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIfCondition() {

      $s0 = $this->peg_parseDataPlaceholder();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseFunction();
      }

      return $s0;
    }

    private function peg_parseElseIfTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseELSEIF();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseIfCondition();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseTAGEND();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f2($s4);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseElseTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseELSE();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseTAGEND();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseEndifTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseENDIF();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseTAGEND();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseTemplateTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseESCAPEDTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseMedium();
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseTemplate();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseTAGEND();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f18();
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseTAGSTART();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseMedium();
          if ($s2 === $this->peg_FAILED) {
            $s2 = null;
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseTemplate();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseTAGEND();
              if ($s4 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f28($s2, $s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseTemplate() {

      $s0 = $this->peg_parseDataPlaceholder();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseFunction();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseSubtemplate();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseTemplateGroup();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseDynamicData();
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseHtml() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s4 = $this->peg_parseTAGSTART();
      $this->peg_silentFails--;
      if ($s4 === $this->peg_FAILED) {
        $s3 = null;
      } else {
        $this->peg_currPos = $s3;
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parseESCAPEDTAGSTART();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = null;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_currPos;
          $this->peg_silentFails++;
          if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c43) {
            $s6 = $this->peg_c43;
            $this->peg_currPos += 5;
          } else {
            $s6 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c44);
            }
          }
          $this->peg_silentFails--;
          if ($s6 === $this->peg_FAILED) {
            $s5 = null;
          } else {
            $this->peg_currPos = $s5;
            $s5 = $this->peg_FAILED;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_currPos;
            $this->peg_silentFails++;
            if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c35) {
              $s7 = $this->peg_c35;
              $this->peg_currPos += 4;
            } else {
              $s7 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c36);
              }
            }
            $this->peg_silentFails--;
            if ($s7 === $this->peg_FAILED) {
              $s6 = null;
            } else {
              $this->peg_currPos = $s6;
              $s6 = $this->peg_FAILED;
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_currPos;
              $this->peg_silentFails++;
              if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c31) {
                $s8 = $this->peg_c31;
                $this->peg_currPos += 4;
              } else {
                $s8 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c32);
                }
              }
              $this->peg_silentFails--;
              if ($s8 === $this->peg_FAILED) {
                $s7 = null;
              } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_FAILED;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_currPos;
                $this->peg_silentFails++;
                if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c45) {
                  $s9 = $this->peg_c45;
                  $this->peg_currPos += 5;
                } else {
                  $s9 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c46);
                  }
                }
                $this->peg_silentFails--;
                if ($s9 === $this->peg_FAILED) {
                  $s8 = null;
                } else {
                  $this->peg_currPos = $s8;
                  $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                  if ($this->input_length > $this->peg_currPos) {
                    $s9 = $this->input_lmb_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                  } else {
                    $s9 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c26);
                    }
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    $s3 = array($s3, $s4, $s5, $s6, $s7, $s8, $s9);
                    $s2 = $s3;
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s4 = $this->peg_parseTAGSTART();
          $this->peg_silentFails--;
          if ($s4 === $this->peg_FAILED) {
            $s3 = null;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s5 = $this->peg_parseESCAPEDTAGSTART();
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
              $s4 = null;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $this->peg_silentFails++;
              if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c43) {
                $s6 = $this->peg_c43;
                $this->peg_currPos += 5;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c44);
                }
              }
              $this->peg_silentFails--;
              if ($s6 === $this->peg_FAILED) {
                $s5 = null;
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_currPos;
                $this->peg_silentFails++;
                if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c35) {
                  $s7 = $this->peg_c35;
                  $this->peg_currPos += 4;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c36);
                  }
                }
                $this->peg_silentFails--;
                if ($s7 === $this->peg_FAILED) {
                  $s6 = null;
                } else {
                  $this->peg_currPos = $s6;
                  $s6 = $this->peg_FAILED;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_currPos;
                  $this->peg_silentFails++;
                  if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c31) {
                    $s8 = $this->peg_c31;
                    $this->peg_currPos += 4;
                  } else {
                    $s8 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c32);
                    }
                  }
                  $this->peg_silentFails--;
                  if ($s8 === $this->peg_FAILED) {
                    $s7 = null;
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c45) {
                      $s9 = $this->peg_c45;
                      $this->peg_currPos += 5;
                    } else {
                      $s9 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c46);
                      }
                    }
                    $this->peg_silentFails--;
                    if ($s9 === $this->peg_FAILED) {
                      $s8 = null;
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      if ($this->input_length > $this->peg_currPos) {
                        $s9 = $this->input_lmb_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                      } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c26);
                        }
                      }
                      if ($s9 !== $this->peg_FAILED) {
                        $s3 = array($s3, $s4, $s5, $s6, $s7, $s8, $s9);
                        $s2 = $s3;
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f25();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseDataPlaceholder() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseFieldIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseFieldIdentifier();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseFieldIdentifier();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_parseOption();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parseOption();
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseAltValue();
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f29($s1, $s2, $s3, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseFieldIdentifier() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_parseTABLEDATASTART();
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseIdentifier();
        if ($s3 !== $this->peg_FAILED) {
          $s2 = array($s2, $s3);
          $s1 = $s2;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseDATASTART();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseIdentifier();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f30($s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseOption() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseOPTIONSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOptionKey();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseOPTIONEND();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f17($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseOPTIONSTART();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseOptionKey();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseOPTIONKEYVALSEP();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseOptionVal();
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parseOPTIONEND();
                if ($s5 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f15($s2, $s4);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseOptionKey() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseOptionKeyChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseOptionKeyChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f18();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseOptionKeyChar() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c47) {
        $s1 = $this->peg_c47;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c48);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOPTIONKEYVALSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c47) {
          $s1 = $this->peg_c47;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c48);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseOPTIONEND();
          if ($s2 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s2 = $this->peg_parseOPTIONKEYVALSEP();
          $this->peg_silentFails--;
          if ($s2 === $this->peg_FAILED) {
            $s1 = null;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s3 = $this->peg_parseOPTIONEND();
            $this->peg_silentFails--;
            if ($s3 === $this->peg_FAILED) {
              $s2 = null;
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
              if ($this->input_length > $this->peg_currPos) {
                $s3 = $this->input_lmb_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c26);
                }
              }
              if ($s3 !== $this->peg_FAILED) {
                $s1 = array($s1, $s2, $s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        }
      }

      return $s0;
    }

    private function peg_parseOptionVal() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseOptionValChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseOptionValChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f18();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseOptionValChar() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c47) {
        $s1 = $this->peg_c47;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c48);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOPTIONEND();
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s2 = $this->peg_parseOPTIONEND();
        $this->peg_silentFails--;
        if ($s2 === $this->peg_FAILED) {
          $s1 = null;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_length > $this->peg_currPos) {
            $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c26);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseAltValue() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c49) {
        $s1 = $this->peg_c49;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c50);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseStringParam();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f31($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseFunction() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseFUNCTIONSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseFunctionCall();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f32($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseFunctionCall() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseFunctionName();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c51) {
            $s3 = $this->peg_c51;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c52);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseParam();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = array();
                $s7 = $this->peg_currPos;
                $s8 = $this->peg_parse_();
                if ($s8 !== $this->peg_FAILED) {
                  if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c53) {
                    $s9 = $this->peg_c53;
                    $this->peg_currPos++;
                  } else {
                    $s9 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c54);
                    }
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    $s10 = $this->peg_parse_();
                    if ($s10 !== $this->peg_FAILED) {
                      $s11 = $this->peg_parseParam();
                      if ($s11 !== $this->peg_FAILED) {
                        $s8 = array($s8, $s9, $s10, $s11);
                        $s7 = $s8;
                      } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s7;
                  $s7 = $this->peg_FAILED;
                }
                while ($s7 !== $this->peg_FAILED) {
                  $s6[] = $s7;
                  $s7 = $this->peg_currPos;
                  $s8 = $this->peg_parse_();
                  if ($s8 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c53) {
                      $s9 = $this->peg_c53;
                      $this->peg_currPos++;
                    } else {
                      $s9 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c54);
                      }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                      $s10 = $this->peg_parse_();
                      if ($s10 !== $this->peg_FAILED) {
                        $s11 = $this->peg_parseParam();
                        if ($s11 !== $this->peg_FAILED) {
                          $s8 = array($s8, $s9, $s10, $s11);
                          $s7 = $s8;
                        } else {
                          $this->peg_currPos = $s7;
                          $s7 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parse_();
                  if ($s7 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c55) {
                      $s8 = $this->peg_c55;
                      $this->peg_currPos++;
                    } else {
                      $s8 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c56);
                      }
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f33($s1, $s5, $s6);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseFunctionName();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c57) {
              $s3 = $this->peg_c57;
              $this->peg_currPos += 2;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c58);
              }
            }
            if ($s3 === $this->peg_FAILED) {
              $s3 = null;
            }
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f34($s1);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseFunctionName() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if (peg_regex_test($this->peg_c59, $this->input_lmb_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c60);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c59, $this->input_lmb_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c60);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f18();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseParam() {

      $s0 = $this->peg_parseFunction();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseDataPlaceholder();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseStringParam();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseNumberParam();
          }
        }
      }

      return $s0;
    }

    private function peg_parseStringParam() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseSTRDELIMITER();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseQuotedStringCharacter();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseQuotedStringCharacter();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSTRDELIMITER();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f35($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseQuotedStringCharacter() {

      if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c61) {
        $s0 = $this->peg_c61;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c62);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s2 = $this->peg_parseSTRDELIMITER();
        $this->peg_silentFails--;
        if ($s2 === $this->peg_FAILED) {
          $s1 = null;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_length > $this->peg_currPos) {
            $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c26);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f18();
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseNumberParam() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseMINUS();
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if (peg_regex_test($this->peg_c63, $this->input_lmb_substr($this->peg_currPos, 1))) {
          $s3 = $this->input_lmb_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c64);
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            if (peg_regex_test($this->peg_c63, $this->input_lmb_substr($this->peg_currPos, 1))) {
              $s3 = $this->input_lmb_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c64);
              }
            }
          }
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parseDECIMALPOINT();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = array();
            if (peg_regex_test($this->peg_c63, $this->input_lmb_substr($this->peg_currPos, 1))) {
              $s6 = $this->input_lmb_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c64);
              }
            }
            if ($s6 !== $this->peg_FAILED) {
              while ($s6 !== $this->peg_FAILED) {
                $s5[] = $s6;
                if (peg_regex_test($this->peg_c63, $this->input_lmb_substr($this->peg_currPos, 1))) {
                  $s6 = $this->input_lmb_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c64);
                  }
                }
              }
            } else {
              $s5 = $this->peg_FAILED;
            }
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f36($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseSubtemplate() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s4 = $this->peg_parseGROUPSTART();
      $this->peg_silentFails--;
      if ($s4 === $this->peg_FAILED) {
        $s3 = null;
      } else {
        $this->peg_currPos = $s3;
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parseFUNCTIONSTART();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = null;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s6 = $this->peg_parseDATASTART();
          $this->peg_silentFails--;
          if ($s6 === $this->peg_FAILED) {
            $s5 = null;
          } else {
            $this->peg_currPos = $s5;
            $s5 = $this->peg_FAILED;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s7 = $this->peg_parseTAGEND();
            $this->peg_silentFails--;
            if ($s7 === $this->peg_FAILED) {
              $s6 = null;
            } else {
              $this->peg_currPos = $s6;
              $s6 = $this->peg_FAILED;
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_currPos;
              $this->peg_silentFails++;
              $s8 = $this->peg_parseIF();
              $this->peg_silentFails--;
              if ($s8 === $this->peg_FAILED) {
                $s7 = null;
              } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_FAILED;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s9 = $this->peg_parseELSE();
                $this->peg_silentFails--;
                if ($s9 === $this->peg_FAILED) {
                  $s8 = null;
                } else {
                  $this->peg_currPos = $s8;
                  $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                  $s9 = $this->peg_currPos;
                  $this->peg_silentFails++;
                  $s10 = $this->peg_parseENDIF();
                  $this->peg_silentFails--;
                  if ($s10 === $this->peg_FAILED) {
                    $s9 = null;
                  } else {
                    $this->peg_currPos = $s9;
                    $s9 = $this->peg_FAILED;
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    $s10 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s11 = $this->peg_parseSTRDELIMITER();
                    $this->peg_silentFails--;
                    if ($s11 === $this->peg_FAILED) {
                      $s10 = null;
                    } else {
                      $this->peg_currPos = $s10;
                      $s10 = $this->peg_FAILED;
                    }
                    if ($s10 !== $this->peg_FAILED) {
                      $s11 = $this->peg_currPos;
                      $this->peg_silentFails++;
                      $s12 = $this->peg_parseOPTIONSTART();
                      $this->peg_silentFails--;
                      if ($s12 === $this->peg_FAILED) {
                        $s11 = null;
                      } else {
                        $this->peg_currPos = $s11;
                        $s11 = $this->peg_FAILED;
                      }
                      if ($s11 !== $this->peg_FAILED) {
                        if ($this->input_length > $this->peg_currPos) {
                          $s12 = $this->input_lmb_substr($this->peg_currPos, 1);
                          $this->peg_currPos++;
                        } else {
                          $s12 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) {
                              $this->peg_fail($this->peg_c26);
                          }
                        }
                        if ($s12 !== $this->peg_FAILED) {
                          $s3 = array($s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12);
                          $s2 = $s3;
                        } else {
                          $this->peg_currPos = $s2;
                          $s2 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s4 = $this->peg_parseGROUPSTART();
          $this->peg_silentFails--;
          if ($s4 === $this->peg_FAILED) {
            $s3 = null;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s5 = $this->peg_parseFUNCTIONSTART();
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
              $s4 = null;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $this->peg_silentFails++;
              $s6 = $this->peg_parseDATASTART();
              $this->peg_silentFails--;
              if ($s6 === $this->peg_FAILED) {
                $s5 = null;
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s7 = $this->peg_parseTAGEND();
                $this->peg_silentFails--;
                if ($s7 === $this->peg_FAILED) {
                  $s6 = null;
                } else {
                  $this->peg_currPos = $s6;
                  $s6 = $this->peg_FAILED;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_currPos;
                  $this->peg_silentFails++;
                  $s8 = $this->peg_parseIF();
                  $this->peg_silentFails--;
                  if ($s8 === $this->peg_FAILED) {
                    $s7 = null;
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s9 = $this->peg_parseELSE();
                    $this->peg_silentFails--;
                    if ($s9 === $this->peg_FAILED) {
                      $s8 = null;
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_currPos;
                      $this->peg_silentFails++;
                      $s10 = $this->peg_parseENDIF();
                      $this->peg_silentFails--;
                      if ($s10 === $this->peg_FAILED) {
                        $s9 = null;
                      } else {
                        $this->peg_currPos = $s9;
                        $s9 = $this->peg_FAILED;
                      }
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_currPos;
                        $this->peg_silentFails++;
                        $s11 = $this->peg_parseSTRDELIMITER();
                        $this->peg_silentFails--;
                        if ($s11 === $this->peg_FAILED) {
                          $s10 = null;
                        } else {
                          $this->peg_currPos = $s10;
                          $s10 = $this->peg_FAILED;
                        }
                        if ($s10 !== $this->peg_FAILED) {
                          $s11 = $this->peg_currPos;
                          $this->peg_silentFails++;
                          $s12 = $this->peg_parseOPTIONSTART();
                          $this->peg_silentFails--;
                          if ($s12 === $this->peg_FAILED) {
                            $s11 = null;
                          } else {
                            $this->peg_currPos = $s11;
                            $s11 = $this->peg_FAILED;
                          }
                          if ($s11 !== $this->peg_FAILED) {
                            if ($this->input_length > $this->peg_currPos) {
                              $s12 = $this->input_lmb_substr($this->peg_currPos, 1);
                              $this->peg_currPos++;
                            } else {
                              $s12 = $this->peg_FAILED;
                              if ($this->peg_silentFails === 0) {
                                  $this->peg_fail($this->peg_c26);
                              }
                            }
                            if ($s12 !== $this->peg_FAILED) {
                              $s3 = array($s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12);
                              $s2 = $s3;
                            } else {
                              $this->peg_currPos = $s2;
                              $s2 = $this->peg_FAILED;
                            }
                          } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_FAILED;
                          }
                        } else {
                          $this->peg_currPos = $s2;
                          $s2 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseOption();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseOption();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f37($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseTemplateGroup() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseGROUPSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseGroupName();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_parseOption();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parseOption();
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseTAGEND();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f38($s2, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseGroupName() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s4 = $this->peg_parseOPTIONSTART();
      $this->peg_silentFails--;
      if ($s4 === $this->peg_FAILED) {
        $s3 = null;
      } else {
        $this->peg_currPos = $s3;
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parseTAGEND();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = null;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          if ($this->input_length > $this->peg_currPos) {
            $s5 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c26);
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4, $s5);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s4 = $this->peg_parseOPTIONSTART();
          $this->peg_silentFails--;
          if ($s4 === $this->peg_FAILED) {
            $s3 = null;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s5 = $this->peg_parseTAGEND();
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
              $s4 = null;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_length > $this->peg_currPos) {
                $s5 = $this->input_lmb_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c26);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s3 = array($s3, $s4, $s5);
                $s2 = $s3;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f18();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseDynamicData() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseStringParam();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseOption();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseOption();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f39($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseMedium() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c65) {
          $s2 = $this->peg_c65;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c66);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f40($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIdentifier() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if (peg_regex_test($this->peg_c67, $this->input_lmb_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c68);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c67, $this->input_lmb_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c68);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f18();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = array();
      if (peg_regex_test($this->peg_c70, $this->input_lmb_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_lmb_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c71);
        }
      }
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        if (peg_regex_test($this->peg_c70, $this->input_lmb_substr($this->peg_currPos, 1))) {
          $s1 = $this->input_lmb_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c71);
          }
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c69);
        }
      }

      return $s0;
    }

    private function peg_parseTAGSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c72) {
        $s0 = $this->peg_c72;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c73);
        }
      }

      return $s0;
    }

    private function peg_parseESCAPEDTAGSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 3) === $this->peg_c74) {
        $s0 = $this->peg_c74;
        $this->peg_currPos += 3;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c75);
        }
      }

      return $s0;
    }

    private function peg_parseTAGEND() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c76) {
        $s0 = $this->peg_c76;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c77);
        }
      }

      return $s0;
    }

    private function peg_parseGROUPSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c78) {
        $s0 = $this->peg_c78;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c79);
        }
      }

      return $s0;
    }

    private function peg_parseFUNCTIONSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c22) {
        $s0 = $this->peg_c22;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c23);
        }
      }

      return $s0;
    }

    private function peg_parseSTRDELIMITER() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c80) {
        $s0 = $this->peg_c80;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c81);
        }
      }

      return $s0;
    }

    private function peg_parseDATASTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c82) {
        $s0 = $this->peg_c82;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c83);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c84) {
          $s0 = $this->peg_c84;
          $this->peg_currPos += 5;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c85);
          }
        }
      }

      return $s0;
    }

    private function peg_parseTABLEDATASTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c86) {
        $s0 = $this->peg_c86;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c87);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c88) {
          $s0 = $this->peg_c88;
          $this->peg_currPos += 5;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c89);
          }
        }
      }

      return $s0;
    }

    private function peg_parseIF() {

      if ($this->input_lmb_substr($this->peg_currPos, 3) === $this->peg_c90) {
        $s0 = $this->peg_c90;
        $this->peg_currPos += 3;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c91);
        }
      }

      return $s0;
    }

    private function peg_parseELSE() {

      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c92) {
        $s0 = $this->peg_c92;
        $this->peg_currPos += 4;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c93);
        }
      }

      return $s0;
    }

    private function peg_parseELSEIF() {

      if ($this->input_lmb_substr($this->peg_currPos, 6) === $this->peg_c94) {
        $s0 = $this->peg_c94;
        $this->peg_currPos += 6;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c95);
        }
      }

      return $s0;
    }

    private function peg_parseENDIF() {

      if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c96) {
        $s0 = $this->peg_c96;
        $this->peg_currPos += 5;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c97);
        }
      }

      return $s0;
    }

    private function peg_parseMINUS() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c98) {
        $s0 = $this->peg_c98;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c99);
        }
      }

      return $s0;
    }

    private function peg_parseDECIMALPOINT() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c100) {
        $s0 = $this->peg_c100;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c101);
        }
      }

      return $s0;
    }

    private function peg_parseOPTIONSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c102) {
        $s0 = $this->peg_c102;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c103);
        }
      }

      return $s0;
    }

    private function peg_parseOPTIONKEYVALSEP() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c22) {
        $s0 = $this->peg_c22;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c23);
        }
      }

      return $s0;
    }

    private function peg_parseOPTIONEND() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c104) {
        $s0 = $this->peg_c104;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c105);
        }
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new stdClass;
    $this->peg_c0 = "<lmb";
    $this->peg_c1 = array( "type" => "literal", "value" => "<lmb", "description" => "\"<lmb\"" );
    $this->peg_c2 = "type=\"if\"";
    $this->peg_c3 = array( "type" => "literal", "value" => "type=\"if\"", "description" => "\"type=\\\"if\\\"\"" );
    $this->peg_c4 = ">";
    $this->peg_c5 = array( "type" => "literal", "value" => ">", "description" => "\">\"" );
    $this->peg_c6 = "</lmb>";
    $this->peg_c7 = array( "type" => "literal", "value" => "</lmb>", "description" => "\"</lmb>\"" );
    $this->peg_c8 = "type=\"elseif\"";
    $this->peg_c9 = array( "type" => "literal", "value" => "type=\"elseif\"", "description" => "\"type=\\\"elseif\\\"\"" );
    $this->peg_c10 = "type=\"else\"";
    $this->peg_c11 = array( "type" => "literal", "value" => "type=\"else\"", "description" => "\"type=\\\"else\\\"\"" );
    $this->peg_c12 = "/>";
    $this->peg_c13 = array( "type" => "literal", "value" => "/>", "description" => "\"/>\"" );
    $this->peg_c14 = "type=\"endif\"";
    $this->peg_c15 = array( "type" => "literal", "value" => "type=\"endif\"", "description" => "\"type=\\\"endif\\\"\"" );
    $this->peg_c16 = "src=";
    $this->peg_c17 = array( "type" => "literal", "value" => "src=", "description" => "\"src=\"" );
    $this->peg_c18 = "data-lmb-data-row=";
    $this->peg_c19 = array( "type" => "literal", "value" => "data-lmb-data-row=", "description" => "\"data-lmb-data-row=\"" );
    $this->peg_c20 = "data-lmb-data-row-filter=";
    $this->peg_c21 = array( "type" => "literal", "value" => "data-lmb-data-row-filter=", "description" => "\"data-lmb-data-row-filter=\"" );
    $this->peg_c22 = "=";
    $this->peg_c23 = array( "type" => "literal", "value" => "=", "description" => "\"=\"" );
    $this->peg_c24 = " ";
    $this->peg_c25 = array( "type" => "literal", "value" => " ", "description" => "\" \"" );
    $this->peg_c26 = array("type" => "any", "description" => "any character" );
    $this->peg_c27 = "<img";
    $this->peg_c28 = array( "type" => "literal", "value" => "<img", "description" => "\"<img\"" );
    $this->peg_c29 = "/^[\\/]/";
    $this->peg_c30 = array( "type" => "class", "value" => "[/]", "description" => "[/]" );
    $this->peg_c31 = "<tr>";
    $this->peg_c32 = array( "type" => "literal", "value" => "<tr>", "description" => "\"<tr>\"" );
    $this->peg_c33 = "</tr>";
    $this->peg_c34 = array( "type" => "literal", "value" => "</tr>", "description" => "\"</tr>\"" );
    $this->peg_c35 = "<tr ";
    $this->peg_c36 = array( "type" => "literal", "value" => "<tr ", "description" => "\"<tr \"" );
    $this->peg_c37 = "<td>";
    $this->peg_c38 = array( "type" => "literal", "value" => "<td>", "description" => "\"<td>\"" );
    $this->peg_c39 = "</td>";
    $this->peg_c40 = array( "type" => "literal", "value" => "</td>", "description" => "\"</td>\"" );
    $this->peg_c41 = "<td ";
    $this->peg_c42 = array( "type" => "literal", "value" => "<td ", "description" => "\"<td \"" );
    $this->peg_c43 = "<lmb ";
    $this->peg_c44 = array( "type" => "literal", "value" => "<lmb ", "description" => "\"<lmb \"" );
    $this->peg_c45 = "<img ";
    $this->peg_c46 = array( "type" => "literal", "value" => "<img ", "description" => "\"<img \"" );
    $this->peg_c47 = "\\";
    $this->peg_c48 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c49 = "|";
    $this->peg_c50 = array( "type" => "literal", "value" => "|", "description" => "\"|\"" );
    $this->peg_c51 = "(";
    $this->peg_c52 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c53 = ",";
    $this->peg_c54 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c55 = ")";
    $this->peg_c56 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c57 = "()";
    $this->peg_c58 = array( "type" => "literal", "value" => "()", "description" => "\"()\"" );
    $this->peg_c59 = "/^[A-Za-z0-9]/";
    $this->peg_c60 = array( "type" => "class", "value" => "[A-Za-z0-9]", "description" => "[A-Za-z0-9]" );
    $this->peg_c61 = "\\\"";
    $this->peg_c62 = array( "type" => "literal", "value" => "\\\"", "description" => "\"\\\\\\\"\"" );
    $this->peg_c63 = "/^[0-9]/";
    $this->peg_c64 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c65 = ":";
    $this->peg_c66 = array( "type" => "literal", "value" => ":", "description" => "\":\"" );
    $this->peg_c67 = "/^[A-Za-z0-9_]/";
    $this->peg_c68 = array( "type" => "class", "value" => "[A-Za-z0-9_]", "description" => "[A-Za-z0-9_]" );
    $this->peg_c69 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c70 = "/^[ \\t\\n\\r\\x{200B}]/";
    $this->peg_c71 = array( "type" => "class", "value" => "[ \t\n\r\x{200B}]", "description" => "[ \t\n\r\x{200B}]" );
    $this->peg_c72 = '${';
    $this->peg_c73 = array( "type" => "literal", "value" => '${', "description" => '\'${\'' );
    $this->peg_c74 = '$${';
    $this->peg_c75 = array( "type" => "literal", "value" => '$${', "description" => '\'$${\'' );
    $this->peg_c76 = "}";
    $this->peg_c77 = array( "type" => "literal", "value" => "}", "description" => "\"}\"" );
    $this->peg_c78 = "{";
    $this->peg_c79 = array( "type" => "literal", "value" => "{", "description" => "\"{\"" );
    $this->peg_c80 = "\"";
    $this->peg_c81 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c82 = "->";
    $this->peg_c83 = array( "type" => "literal", "value" => "->", "description" => "\"->\"" );
    $this->peg_c84 = "-&gt;";
    $this->peg_c85 = array( "type" => "literal", "value" => "-&gt;", "description" => "\"-&gt;\"" );
    $this->peg_c86 = "=>";
    $this->peg_c87 = array( "type" => "literal", "value" => "=>", "description" => "\"=>\"" );
    $this->peg_c88 = "=&gt;";
    $this->peg_c89 = array( "type" => "literal", "value" => "=&gt;", "description" => "\"=&gt;\"" );
    $this->peg_c90 = "if ";
    $this->peg_c91 = array( "type" => "literal", "value" => "if ", "description" => "\"if \"" );
    $this->peg_c92 = "else";
    $this->peg_c93 = array( "type" => "literal", "value" => "else", "description" => "\"else\"" );
    $this->peg_c94 = "elseif";
    $this->peg_c95 = array( "type" => "literal", "value" => "elseif", "description" => "\"elseif\"" );
    $this->peg_c96 = "endif";
    $this->peg_c97 = array( "type" => "literal", "value" => "endif", "description" => "\"endif\"" );
    $this->peg_c98 = "-";
    $this->peg_c99 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c100 = ".";
    $this->peg_c101 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c102 = "[";
    $this->peg_c103 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c104 = "]";
    $this->peg_c105 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );

    $peg_startRuleFunctions = array( 'Start' => array($this, "peg_parseStart") );
    $peg_startRuleFunction  = array($this, "peg_parseStart");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};