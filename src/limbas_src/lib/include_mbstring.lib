<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */

# Also possible
//mb_internal_encoding('UTF-8');

function lmb_strlen($str){
    return mb_strlen($str, $GLOBALS['umgvar']['charset']);
}

function lmb_strpos($haystack, $needle, $offset=null){
    return mb_strpos($haystack, $needle, $offset, $GLOBALS['umgvar']['charset']);
}

function lmb_strrpos($haystack, $needle, $offset=null){
    return mb_strrpos($haystack, $needle, $offset, $GLOBALS['umgvar']['charset']);
}

function lmb_substr($string, $start, $length=null){
    return mb_substr($string, $start, $length, $GLOBALS['umgvar']['charset']);
}

function lmb_strtolower($string){
    return mb_strtolower($string, $GLOBALS['umgvar']['charset']);
}

function lmb_strtoupper($string){
    return mb_strtoupper($string, $GLOBALS['umgvar']['charset']);
}

function lmb_stripos($haystack, $needle, $offset=null){
    return mb_stripos($haystack, $needle, $offset, $GLOBALS['umgvar']['charset']);
}

function lmb_strripos($haystack, $needle, $offset=null){
    return mb_strripos($haystack, $needle, $offset, $GLOBALS['umgvar']['charset']);
}

function lmb_strstr($haystack, $needle, $before_needle=null){
    return mb_strstr($haystack, $needle, $before_needle, $GLOBALS['umgvar']['charset']);
}

function lmb_stristr($haystack, $needle, $before_needle=null){
    return mb_stristr($haystack, $needle, $before_needle, $GLOBALS['umgvar']['charset']);
}

function lmb_strrchr($haystack, $needle){
    return mb_strrchr($haystack, $needle, false, $GLOBALS['umgvar']['charset']);
}

function lmb_substr_count($haystack, $needle, $offset=null, $length=null){
    if ($offset) {
        $haystack = mb_substr($haystack, $offset, $length, $GLOBALS['umgvar']['charset']);
    }
    return mb_substr_count($haystack, $needle, $GLOBALS['umgvar']['charset']);
}

function lmb_ereg($pattern, $string){
    return mb_ereg($pattern, $string);
}

function lmb_eregi($pattern, $string){
    return mb_eregi($pattern, $string);
}

function lmb_ereg_replace($pattern, $replacement, $string){
    return mb_ereg_replace($pattern, $replacement, $string);
}

function lmb_eregi_replace($pattern, $replacement, $string){
    return mb_eregi_replace($pattern, $replacement, $string);
}

function lmb_split($pattern, $string, $limit=null){
    return mb_split($pattern, $string, $limit);
}

// http://floern.com/webscripting/mb-strrev-multibyte-string-umkehren
function lmb_strrev($string) {
    return mb_convert_encoding( strrev( mb_convert_encoding($string, 'UTF-16BE', 'UTF-8') ), 'UTF-8', 'UTF-16LE');
}

// http://php.net/manual/de/function.str-pad.php#116244
function lmb_str_pad($str, $pad_len, $pad_str = ' ', $dir = STR_PAD_RIGHT)
{
    $padBefore = $dir === STR_PAD_BOTH || $dir === STR_PAD_LEFT;
    $padAfter = $dir === STR_PAD_BOTH || $dir === STR_PAD_RIGHT;
    $pad_len -= mb_strlen($str, $GLOBALS['umgvar']['charset']);
    $targetLen = $padBefore && $padAfter ? $pad_len / 2 : $pad_len;
    $strToRepeatLen = mb_strlen($pad_str, $GLOBALS['umgvar']['charset']);
    $repeatTimes = ceil($targetLen / $strToRepeatLen);
    $repeatedString = str_repeat($pad_str, max(0, $repeatTimes)); // safe if used with valid utf-8 strings
    $before = $padBefore ? mb_substr($repeatedString, 0, floor($targetLen), $GLOBALS['umgvar']['charset']) : '';
    $after = $padAfter ? mb_substr($repeatedString, 0, ceil($targetLen), $GLOBALS['umgvar']['charset']) : '';
    return $before . $str . $after;
}

?>
