<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */
function testDatabase($configFile = null)
{
    global $db;

    $DBA = [];

    if (empty($configFile)) {

        $DBA['DBSCHEMA'] = $_POST['setup_dbschema'];
        $DBA['DBNAME'] = $_POST['setup_database'];

        $DBA['DB'] = $_POST['db_vendor'];

        if (!$DBA['DB']) {
            $DBA['DB'] = 'postgres';
        }

        if ($_POST['radio_odbc'] == 'pdo') {
            $DBA['ODBCDRIVER'] = 'PDO';
        } else {
            #$DBA['ODBCDRIVER'] = 'ODBC';
            $DBA['ODBCDRIVER'] = $_POST['setup_dbdriver'];
        }

        $DBA['DBUSER'] = $_POST['setup_dbuser'];
        $DBA['DBPASS'] = $_POST['setup_dbpass'];

        $DBA['DBHOST'] = $_POST['setup_host'];
        $DBA['PORT'] = $_POST['setup_dbport'];

    } else {
        require $configFile;
    }

    //check if all keys are present
    $keys = ['DBHOST', 'DBNAME', 'DBUSER', 'DBPASS', 'ODBCDRIVER', 'PORT'];
    foreach ($keys as $key) {
        if (!array_key_exists($key, $DBA)) {
            return 0;
        }
    }

    if ($DBA['ODBCDRIVER'] == 'PDO') {
        require_once(COREPATH  . 'lib/db/db_pdo.lib');
    } else {
        require_once(COREPATH  . 'lib/db/db_odbc.lib');
    }

    require_once(COREPATH  . 'lib/db/db_' . $DBA['DB'] . '.lib');
    require_once(COREPATH  . 'lib/db/db_' . $DBA['DB'] . '_admin.lib');
    require_once(COREPATH  . 'lib/include.lib');

    try {
        /* --- check basic connection and get database Version --- */
        if ($db = dbq_0($DBA['DBHOST'], $DBA['DBNAME'], $DBA['DBUSER'], $DBA['DBPASS'], $DBA['ODBCDRIVER'], $DBA['PORT'])) {
            // database version
            $setup_version = dbf_version($DBA);
            $DBA['VERSION'] = $setup_version[1];
        } else {
            // db connection was not successful
            return 0;
        }


        // if no config file exists check all database functions
        if (empty($configFile)) {

            $msg = [];
            $msic = [];

            lmb_StartTransaction(1);

            if ($DBA['DB'] == 'mysql' and $DBA['ODBCDRIVER'] != 'PDO') { // check for lower case table names
                $sqlquery1 = "SELECT CASE WHEN @@lower_case_table_names = 1 THEN 1 ELSE 2 END AS CSENSITIV";
                $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, 'install', __FILE__, __LINE__);
                if ($rs1 and lmbdb_result($rs1, 'CSENSITIV') == 1) {
                    $msg['db_conf'] = Msg::ok();
                    $msic['db_conf'] = "1";
                } else {
                    $msg['db_conf'] = "<span class=\"text-danger\">configure mysql with lower_case_table_names = 1 in /etc/my.cnf</span>";
                    $msic['db_conf'] = "3";
                    $commit = 1;
                }
            } elseif ($DBA['DB'] == 'postgres') {
                #$sqlquery1 = "SHOW ALL";
                $sqlquery1 = "SHOW LC_CTYPE";
                $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, 'install', __FILE__, __LINE__);
                $LC_CTYPE = lmbdb_result($rs1, 'LC_CTYPE');
                $sqlquery2 = "SHOW SYNCHRONOUS_COMMIT";
                $rs2 = lmbdb_exec($db, $sqlquery2) or errorhandle(lmbdb_errormsg($db), $sqlquery2, 'install', __FILE__, __LINE__);
                $SYNCHRONOUS_COMMIT = lmbdb_result($rs2, 'SYNCHRONOUS_COMMIT');
                if ($rs1 and $LC_CTYPE == 'C') {
                    $msg['db_conf'] = Msg::ok() . '<br><i>(synchronous_commit = ' . $SYNCHRONOUS_COMMIT . ')</i>';
                    $msic['db_conf'] = '1';
                } else {
                    $msg['db_conf'] = "<span class=\"text-danger\">wrong localisation! Create database cluster or database with <i><u>locale=C</u></i> or alternative create database with:<br><code>create database {{$DBA['DBNAME']}} WITH ENCODING '" . $setup_version[2] . "' <b>LC_COLLATE 'C' LC_CTYPE 'C'</b> OWNER {{$DBA['DBUSER']}} TEMPLATE template0;</code></i>";
                    $msic['db_conf'] = '3';
                    $commit = 1;
                }
            }


            // drop test table
            #$sqlquery1 = "DROP TABLE " . dbf_4("LIMBASTEST");
            #$rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, 'install', __FILE__, __LINE__);


            // create table
            $sqlquery = "CREATE TABLE " . dbf_4("LIMBASTEST") . " (ID " . LMB_DBTYPE_INTEGER . ",ERSTDATUM " . LMB_DBTYPE_TIMESTAMP . " DEFAULT " . LMB_DBDEF_TIMESTAMP . ",TXT " . LMB_DBTYPE_VARCHAR . "(6))";
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, 'install', __FILE__, __LINE__);
            if ($rs) {
                $msg['db_create'] = Msg::ok();
                $msic['db_create'] = 1;
            } else {
                $msg['db_create'] = Msg::error();
                $msic['db_create'] = 3;
                $commit = 1;
            }

            // insert into
            if (stripos($setup_version[2], 'UTF') !== false) {
                $insertstring = 'a1ä2Ü3';
            } else {
                $insertstring = utf8_decode('a1ä2Ü3');
            }

            $sqlquery = "INSERT INTO LIMBASTEST (ID,TXT)  VALUES (1,'" . $insertstring . "')";
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, 'install', __FILE__, __LINE__);
            if ($rs) {
                $msg['db_insert'] = Msg::ok();
                $msic['db_insert'] = 1;
            } else {
                $msg['db_insert'] = Msg::error();
                $msic['db_insert'] = 3;
                $commit = 1;
            }
            // select
            $sqlquery = "SELECT * FROM LIMBASTEST";
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, 'install', __FILE__, __LINE__);
            if ($rs) {
                $msg['db_select'] = Msg::ok();
                $msic['db_select'] = "1";
            } else {
                $msg['db_select'] = Msg::error();
                $msic['db_select'] = "3";
                $commit = 1;
            }

            // check cursor
            if ($DBA['ODBCDRIVER'] != 'PDO') {
                $sqlquery = 'SELECT * FROM LIMBASTEST';
                $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, 'install', __FILE__, __LINE__);
                if (lmbdb_fetch_row($rs, 1)) {
                    lmbdb_result($rs, "ID");
                    if (lmbdb_fetch_row($rs, 1)) {
                        if (lmbdb_result($rs, "ID")) {
                            $cursor = 1;
                        } else {
                            $cursor = 0;
                        }
                    }
                }
                if ($cursor or $DBA['ODBCDRIVER'] == 'PDO') {
                    $msg['db_cursor'] = Msg::ok();
                    $msic['db_cursor'] = '1';
                } elseif ($DBA['ODBCDRIVER'] == 'PDO') {
                    $msg['db_cursor'] = Msg::ok();
                    $msic['db_cursor'] = '4';
                    $commit = 0;
                } else {
                    $msg['db_cursor'] = Msg::error();
                    $msic['db_cursor'] = '3';
                    $commit = 1;
                }
            }

            // delete from
            $sqlquery = 'DELETE FROM LIMBASTEST';
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, 'install', __FILE__, __LINE__);
            if ($rs) {
                $msg['db_delete'] = Msg::ok();
                $msic['db_delete'] = "1";
            } else {
                $msg['db_delete'] = Msg::error();
                $msic['db_delete'] = "3";
                $commit = 1;
            }
            // drop table
            $sqlquery = 'DROP TABLE ' . dbf_4("LIMBASTEST");
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, 'install', __FILE__, __LINE__);
            if ($rs) {
                $msg['db_drop'] = Msg::ok();
                $msic['db_drop'] = "1";
            } else {
                $msg['db_drop'] = Msg::error();
                $msic['db_drop'] = "3";
                $commit = 1;
            }

            lmb_EndTransaction(!(isset($commit) && $commit));
            lmbdb_close($db);

            // check utf-8 encoding support
            if (stripos($setup_version[2], 'UTF') !== false and !function_exists("mb_strlen")) {
                $msg['db_encoding'] = Msg::error() . '<br><i>to use UTF8 encoding you need to install php <b>mbstring</b> modul</i>';
                $msic['db_encoding'] = '3';
                $commit = 1;
            } else {
                $msg['db_encoding'] = Msg::ok();
                $msic['db_encoding'] = '1';
            }

            # set as checked, if no error occured
            if (!$commit) {
                $db_test = 'valid';
            }

            //return test verbose test result
            return ['valid' => !$commit, 'msg' => $msg, 'msic' => $msic];
        } else {
            //if a config file exists, check if limbas is already installed

            $sqlquery1 = 'SELECT * FROM LMB_UMGVAR';
            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, '', __FILE__, __LINE__);
            if ($rs1) {
                // db connection was successful and limbas tables were found
                return 2;
            } else {
                //db connection was successful but no limbas tables were found
                return 1;
            }

        }
    } catch (Throwable) {
    }

    return 0;
}

function lang($value)
{
    global $lang;

    if (LANG !== 'en' && is_array($lang) && array_key_exists($value, $lang)) {
        return $lang[$value];
    }

    return $value;
}
